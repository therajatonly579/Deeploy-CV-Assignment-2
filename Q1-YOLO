pip install opencv-python

import cv2
import numpy as np

def load_yolo_model():
    """
    Load YOLO model, weights, and class names.
    """
    # Paths to YOLO configuration and weights files
    yolo_config_path = "C:\Users\rajat\Downloads\yolov3.cfg"  # Replace with your YOLO config file
    yolo_weights_path = "C:\Users\rajat\Downloads\yolov3.weights"  # Replace with your YOLO weights file
    coco_names_path = "C:\Users\rajat\Downloads\coco.names"  # Replace with your class names file

    # Load YOLO network
    net = cv2.dnn.readNet(yolo_weights_path, yolo_config_path)

    # Get class names
    with open(coco_names_path, "r") as file:
        classes = [line.strip() for line in file.readlines()]

    # Get the output layers from the YOLO model
    output_layers = net.getUnconnectedOutLayersNames()

    return net, classes, output_layers

def detect_objects(frame, net, output_layers, classes):
    """
    Perform object detection on a single frame.
    """
    height, width, _ = frame.shape

    # Prepare the frame for YOLO input
    blob = cv2.dnn.blobFromImage(frame, 0.00392, (416, 416), (0, 0, 0), swapRB=True, crop=False)
    net.setInput(blob)

    # Perform forward pass to get detections
    detections = net.forward(output_layers)

    # Initialize lists for detected objects
    class_ids = []
    confidences = []
    boxes = []

    # Loop through each detection
    for output in detections:
        for detection in output:
            scores = detection[5:]  # Scores for each class
            class_id = np.argmax(scores)
            confidence = scores[class_id]

            # Filter out weak detections
            if confidence > 0.5:  # Confidence threshold
                center_x = int(detection[0] * width)
                center_y = int(detection[1] * height)
                w = int(detection[2] * width)
                h = int(detection[3] * height)

                # Calculate top-left corner of the bounding box
                x = int(center_x - w / 2)
                y = int(center_y - h / 2)

                boxes.append([x, y, w, h])
                confidences.append(float(confidence))
                class_ids.append(class_id)

    # Apply Non-Maximum Suppression (NMS) to remove redundant boxes
    indices = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

    # Draw bounding boxes and labels on the frame
  if len(indices) > 0:
      for i in indices.flatten():
        x, y, w, h = boxes[i]
        label = str(classes[class_ids[i]])
        confidence = confidences[i]

        # Draw rectangle and label
        cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.putText(frame, f"{label} {confidence:.2f}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)

    return frame

def main():
    # Load YOLO model and classes
    net, classes, output_layers = load_yolo_model()

    # Open webcam video capture
    cap = cv2.VideoCapture(0)  # Use 1 or other indices if you have multiple cameras

    if not cap.isOpened():
        print("Error: Could not open webcam.")
        return

    print("Press 'q' to quit the application.")

    while True:
        ret, frame = cap.read()
        if not ret:
            print("Failed to grab frame.")
            break

        # Perform object detection
        frame = detect_objects(frame, net, output_layers, classes)

        # Display the frame
        cv2.imshow("YOLO Object Detection", frame)

        # Break loop on 'q' key press
        if cv2.waitKey(1) & 0xFF == ord("q"):
            break

    # Release resources
    cap.release()
    cv2.destroyAllWindows()

if __name__ == "__main__":
    main()
